/* Generated By:JJTree&JavaCC: Do not edit this line. OXPathScripterConstants.java */
package uk.ac.ox.comlab.oxpath.scriptParser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OXPathScripterConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int APOSTROPHE_URL = 1;
  /** RegularExpression Id. */
  int QUOTE_URL = 2;
  /** RegularExpression Id. */
  int SPACE = 3;
  /** RegularExpression Id. */
  int TAB = 4;
  /** RegularExpression Id. */
  int NEWLINE = 5;
  /** RegularExpression Id. */
  int DATABASE = 6;
  /** RegularExpression Id. */
  int URL = 7;
  /** RegularExpression Id. */
  int PATH = 8;
  /** RegularExpression Id. */
  int VARIABLE_DEFAULT = 9;
  /** RegularExpression Id. */
  int QNAME_DEFAULT = 10;
  /** RegularExpression Id. */
  int XQBLOCK = 11;
  /** RegularExpression Id. */
  int PROTOCOL = 12;
  /** RegularExpression Id. */
  int FOCUS = 13;
  /** RegularExpression Id. */
  int CLICK = 14;
  /** RegularExpression Id. */
  int DBLCLICK = 15;
  /** RegularExpression Id. */
  int MOUSEDOWN = 16;
  /** RegularExpression Id. */
  int MOUSEENTER = 17;
  /** RegularExpression Id. */
  int MOUSEMOVE = 18;
  /** RegularExpression Id. */
  int MOUSEOVER = 19;
  /** RegularExpression Id. */
  int MOUSEOUT = 20;
  /** RegularExpression Id. */
  int MOUSEUP = 21;
  /** RegularExpression Id. */
  int WHEEL = 22;
  /** RegularExpression Id. */
  int SUBMIT = 23;
  /** RegularExpression Id. */
  int UNCLICK = 24;
  /** RegularExpression Id. */
  int CHECK = 25;
  /** RegularExpression Id. */
  int UNCHECK = 26;
  /** RegularExpression Id. */
  int END_URL_IN_PATH = 27;
  /** RegularExpression Id. */
  int END_URL = 28;
  /** RegularExpression Id. */
  int SLASH_URL = 29;
  /** RegularExpression Id. */
  int QUESTION_URL = 30;
  /** RegularExpression Id. */
  int MINUS_URL = 31;
  /** RegularExpression Id. */
  int UNDERSCORE_URL = 32;
  /** RegularExpression Id. */
  int PERIOD_URL = 33;
  /** RegularExpression Id. */
  int AMPERSAND_URL = 34;
  /** RegularExpression Id. */
  int EQUALS_URL = 35;
  /** RegularExpression Id. */
  int DOLLAR_URL = 36;
  /** RegularExpression Id. */
  int PERCENT_URL = 37;
  /** RegularExpression Id. */
  int AT_URL = 38;
  /** RegularExpression Id. */
  int PLUS_URL = 39;
  /** RegularExpression Id. */
  int EXCLAIMATION_URL = 40;
  /** RegularExpression Id. */
  int STAR_URL = 41;
  /** RegularExpression Id. */
  int OPEN_PARAN_URL = 42;
  /** RegularExpression Id. */
  int CLOSE_PARAN_URL = 43;
  /** RegularExpression Id. */
  int COMMA_URL = 44;
  /** RegularExpression Id. */
  int LOWER_ALPHA = 45;
  /** RegularExpression Id. */
  int UPPER_ALPHA = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int ENDLINE = 48;
  /** RegularExpression Id. */
  int EQUALS_DEFAULT = 49;
  /** RegularExpression Id. */
  int DOC_BEGIN = 50;
  /** RegularExpression Id. */
  int OPEN_PARAN = 51;
  /** RegularExpression Id. */
  int CLOSE_PARAN = 52;
  /** RegularExpression Id. */
  int OPEN_OPTIONAL = 53;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 54;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 55;
  /** RegularExpression Id. */
  int BEGIN_URL_IN_PATH = 56;
  /** RegularExpression Id. */
  int OPEN_CURLY = 57;
  /** RegularExpression Id. */
  int CLOSE_CURLY = 58;
  /** RegularExpression Id. */
  int COMMA = 59;
  /** RegularExpression Id. */
  int NUMBER = 60;
  /** RegularExpression Id. */
  int DESCENDENT_OR_SELF_SHORT = 61;
  /** RegularExpression Id. */
  int BEGIN_KLEENE_STAR = 62;
  /** RegularExpression Id. */
  int SLASH = 63;
  /** RegularExpression Id. */
  int BEGIN_EXTRACT_MARK = 64;
  /** RegularExpression Id. */
  int OXPATH_AXISNAME = 65;
  /** RegularExpression Id. */
  int XPATH_FORWARD_AXISNAME = 66;
  /** RegularExpression Id. */
  int XPATH_BACKWARD_AXISNAME = 67;
  /** RegularExpression Id. */
  int AXIS = 68;
  /** RegularExpression Id. */
  int NODE_TYPE = 69;
  /** RegularExpression Id. */
  int NODE_TYPE_OXPATH = 70;
  /** RegularExpression Id. */
  int PERIOD = 71;
  /** RegularExpression Id. */
  int PARENT_SHORT = 72;
  /** RegularExpression Id. */
  int AT = 73;
  /** RegularExpression Id. */
  int FUNCTION_NAME = 74;
  /** RegularExpression Id. */
  int VARIABLE = 75;
  /** RegularExpression Id. */
  int END_EXTRACT_MARK = 76;
  /** RegularExpression Id. */
  int AND = 77;
  /** RegularExpression Id. */
  int OR = 78;
  /** RegularExpression Id. */
  int MOD = 79;
  /** RegularExpression Id. */
  int DIV = 80;
  /** RegularExpression Id. */
  int MULTIPLY = 81;
  /** RegularExpression Id. */
  int UNION = 82;
  /** RegularExpression Id. */
  int PLUS = 83;
  /** RegularExpression Id. */
  int MINUS = 84;
  /** RegularExpression Id. */
  int LESSTE = 85;
  /** RegularExpression Id. */
  int LESS = 86;
  /** RegularExpression Id. */
  int GREATERTE = 87;
  /** RegularExpression Id. */
  int GREATER = 88;
  /** RegularExpression Id. */
  int NOTEQUAL = 89;
  /** RegularExpression Id. */
  int EQUALS = 90;
  /** RegularExpression Id. */
  int PERIOD_OP = 91;
  /** RegularExpression Id. */
  int HASH = 92;
  /** RegularExpression Id. */
  int WORD_TEST = 93;
  /** RegularExpression Id. */
  int CONTAINS = 94;
  /** RegularExpression Id. */
  int PROCESSING_INSTRUCTION = 95;
  /** RegularExpression Id. */
  int COMMENT = 96;
  /** RegularExpression Id. */
  int TEXT = 97;
  /** RegularExpression Id. */
  int NODE = 98;
  /** RegularExpression Id. */
  int FIELD = 99;
  /** RegularExpression Id. */
  int ANY_FIELD = 100;
  /** RegularExpression Id. */
  int WAIT = 101;
  /** RegularExpression Id. */
  int UNTIL = 102;
  /** RegularExpression Id. */
  int DOLLAR = 103;
  /** RegularExpression Id. */
  int WILDCARD = 104;
  /** RegularExpression Id. */
  int WILDCARD_BOUNDED = 105;
  /** RegularExpression Id. */
  int QNAME = 106;
  /** RegularExpression Id. */
  int NCNAME = 107;
  /** RegularExpression Id. */
  int NAMESTARTCHAR = 108;
  /** RegularExpression Id. */
  int COLON = 109;
  /** RegularExpression Id. */
  int DIGITS = 110;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_STRING_PATH = 112;
  /** RegularExpression Id. */
  int SINGLE_QUOTE_STRING_PATH = 115;

  /** Lexical state. */
  int IN_URL = 0;
  /** Lexical state. */
  int DEFAULT = 1;
  /** Lexical state. */
  int IN_PATH = 2;
  /** Lexical state. */
  int IN_PATH_OP = 3;
  /** Lexical state. */
  int IN_DOUBLE_QUOTE_STRING_PATH = 4;
  /** Lexical state. */
  int IN_SINGLE_QUOTE_STRING_PATH = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\\'\"",
    "\"\\\"\"",
    "\" \"",
    "\"\\t\"",
    "<NEWLINE>",
    "<DATABASE>",
    "<URL>",
    "<PATH>",
    "<VARIABLE_DEFAULT>",
    "<QNAME_DEFAULT>",
    "<XQBLOCK>",
    "<PROTOCOL>",
    "\"focus\"",
    "\"click\"",
    "\"dblclick\"",
    "\"mousedown\"",
    "\"mouseenter\"",
    "\"mousemove\"",
    "\"event\"",
    "\"mouseout\"",
    "\"mouseup\"",
    "\"wheel\"",
    "\"submit\"",
    "\"unclick\"",
    "\"check\"",
    "\"uncheck\"",
    "\">\"",
    "\"}\"",
    "\"/\"",
    "\"?\"",
    "\"-\"",
    "\"_\"",
    "\".\"",
    "\"&\"",
    "\"=\"",
    "\"$\"",
    "\"%\"",
    "\"@\"",
    "\"+\"",
    "\"!\"",
    "\"*\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "<LOWER_ALPHA>",
    "<UPPER_ALPHA>",
    "<DIGIT>",
    "\";\"",
    "\"=\"",
    "<DOC_BEGIN>",
    "\"(\"",
    "\")\"",
    "\"[?\"",
    "\"[\"",
    "\"]\"",
    "<BEGIN_URL_IN_PATH>",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "<NUMBER>",
    "<DESCENDENT_OR_SELF_SHORT>",
    "<BEGIN_KLEENE_STAR>",
    "\"/\"",
    "\":<\"",
    "<OXPATH_AXISNAME>",
    "<XPATH_FORWARD_AXISNAME>",
    "<XPATH_BACKWARD_AXISNAME>",
    "\"::\"",
    "<NODE_TYPE>",
    "<NODE_TYPE_OXPATH>",
    "\".\"",
    "\"..\"",
    "\"@\"",
    "<FUNCTION_NAME>",
    "<VARIABLE>",
    "\">\"",
    "\"and\"",
    "\"or\"",
    "\"mod\"",
    "\"div\"",
    "\"*\"",
    "\"|\"",
    "\"+\"",
    "\"-\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"!=\"",
    "\"=\"",
    "\".\"",
    "\"#\"",
    "\"~=\"",
    "\"#=\"",
    "\"processing-instruction\"",
    "\"comment\"",
    "\"text\"",
    "\"node\"",
    "\"field\"",
    "\"any-field\"",
    "<WAIT>",
    "<UNTIL>",
    "\"$\"",
    "\"*\"",
    "<WILDCARD_BOUNDED>",
    "<QNAME>",
    "<NCNAME>",
    "<NAMESTARTCHAR>",
    "\":\"",
    "<DIGITS>",
    "\"\\\"\"",
    "\"\\\"\"",
    "<token of kind 113>",
    "\"\\\'\"",
    "\"\\\'\"",
    "<token of kind 116>",
  };

}
