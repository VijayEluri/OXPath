/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ScriptGrammar.jj */
/*@egen*//*
 * Copyright (c)2011, DIADEM Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the DIADEM team nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL DIADEM Team BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /**
 * JJTree template file for specifying the OXPath script parser
 */options{  JDK_VERSION = "1.5";  static = false;
  LOOKAHEAD = 1;
//  IGNORE_CASE =true;}PARSER_BEGIN(OXPathScripter)package uk.ac.ox.comlab.oxpath.scriptParser;

import java.io.FileReader;

import java.lang.StringBuilder;

import java.io.StringReader;

import uk.ac.ox.comlab.oxpath.BadDataException;

public class OXPathScripter/*@bgen(jjtree)*/implements OXPathScripterTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTOXPathScripterState jjtree = new JJTOXPathScripterState();

/*@egen*/
  public OXPathScripter()  {
      }

//use as a testing environment
  public static void main(String args [])  {	
//    System.out.println("Reading from standard input...");//    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    try    {
      FileReader reader = new FileReader(args[0]);
//      new OXPathScripter(reader);
      OXPathScripter oxpathscripter = new OXPathScripter(reader);      SimpleNode n = oxpathscripter.Script();//      OXPathScripter.dump(n,"");//      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());
      e.printStackTrace();    }  }

   /**
   * Returns JJTree of script
   */
   public static SimpleNode getJJTree(String inputfile) throws Exception	   {
//	     SimpleNode n;
//	     try//	     {	       FileReader reader = new FileReader(inputfile);
	       OXPathScripter oxpathscripter = new OXPathScripter(reader);
	       SimpleNode n = oxpathscripter.Script();
	       return n;
//	     }
//	     catch (Exception e)//	     {//      System.out.println("Oops.");//      System.out.println(e.getMessage());//      e.printStackTrace();
//     }
	   }

	   public static SimpleNode getJJTreeFromString(String in) throws Exception
	   {		      return new OXPathScripter(new StringReader(in)).Script();
	   }

	   protected static String process(SimpleNode n, String value)	   {	     n.jjtSetValue(value);
	     return (String) n.jjtGetValue();
	   }

	   public static String getValue(SimpleNode n) throws RuntimeException
	   {
	     if (n.jjtGetValue() instanceof String)	     {	       return (String) n.jjtGetValue();
	     }
	     else throw new RuntimeException("Node value state not String object!");	   }

	   public static void dump(SimpleNode root, String prefix) {
	    if (!(root.jjtGetValue() instanceof String))	      {System.out.println(root.toString(prefix));}	    	    else
	      System.out.println(root.toString(prefix)+ "["+root.jjtGetValue()+"]");
    if (root.jjtGetNumChildren() > 0) {
      for (int i = 0; i < root.jjtGetNumChildren(); ++i) {
        SimpleNode n = (SimpleNode)root.jjtGetChild(i);
        if (n != null) {
          dump(n,prefix + " ");
        }
      }
    }
  }

  public static String stringDump(SimpleNode root, String prefix)  {    return stringDumpInt(root,prefix).toString();
  }

  public static StringBuilder stringDumpInt(SimpleNode root, String prefix)  {    StringBuilder rv = new StringBuilder();
    if (!(root.jjtGetValue() instanceof String))
	      {rv.append(root.toString(prefix) + "\n");}	    
	    else
	      {rv.append(root.toString(prefix)+ "["+root.jjtGetValue()+"]\n");}
	    if (root.jjtGetNumChildren() > 0) {
      for (int i = 0; i < root.jjtGetNumChildren(); ++i) {
        SimpleNode n = (SimpleNode)root.jjtGetChild(i);
        if (n != null) {
          rv.append(stringDumpInt(n,prefix + " "));
        }
      }
    }
    return rv;
  }

	   public static SimpleNode safeGetChild(SimpleNode parent, int index) throws BadDataException {
     if (isSafeChild(parent,index))     {
       return (SimpleNode) parent.jjtGetChild(index);     }
     else throw new BadDataException("Not an OXPath AST node!");
	   }

	   public static boolean isSafeChild(SimpleNode parent, int index) {
	     if (parent.jjtGetChild(index) instanceof SimpleNode)
	     {	       return true;
	     }
	     else	     {	       return false;
	     }
	   }

	   public static boolean hasChildByName(SimpleNode parent, String name)	   {	     for (int i = 0; i<parent.jjtGetNumChildren(); i++)
	     {
	       if (parent.jjtGetChild(i).toString().equals(name))
	       {
	         return true;
	       }
     }
     return false;
	   }

	   	public static boolean hasDescendantOrSelfByName(SimpleNode parent, String name) throws BadDataException
	   {
	     if (parent.toString().equals(name)) return true;
	     else	     {	       for (int i = 0; i<parent.jjtGetNumChildren(); i++)
	           {
	              if (hasDescendantOrSelfByName(toSimpleNode(parent.jjtGetChild(i)),name)) {
	                  return true;
	              }
           }
     }
     return false;
	   }     	       

	   public static SimpleNode getChildByName(SimpleNode parent, String name) throws BadDataException	   {
	     for (int i = 0; i<parent.jjtGetNumChildren(); i++)	     {
	       if (parent.jjtGetChild(i).toString().equals(name))
	       {	         return safeGetChild(parent,i);
	       }     }
     throw new BadDataException("Child not found!");	   }
		  
			   public static int test(String tester)
			   {
		    System.out.println(tester);
    return 1;   }

   public static boolean isDescendant(Node a, Node d)   {
     if (a.equals(d)) return true;
     Node temp = d.jjtGetParent();	 while (!(temp==null))	 {	     if (a.equals(temp)) return true;
	     temp = temp.jjtGetParent();
	 }
	 return false;
   }

   public static int getNodeID(SimpleNode node)   {     return node.id;
   }

   public static SimpleNode toSimpleNode(Node n) throws BadDataException
   {    if (n instanceof SimpleNode) return (SimpleNode) n;
    else throw new BadDataException("Node can't be cast as a SimpleNode");
  }

   
}PARSER_END(OXPathScripter)
< IN_URL > TOKEN :{  < APOSTROPHE_URL : "'" >
| < QUOTE_URL : "\"" >
}

////Single quote processing////< DEFAULT > MORE ://{//< "'" > : IN_SINGLE_QUOTE_STRING_DEFAULT//}////< IN_SINGLE_QUOTE_STRING_DEFAULT >//TOKEN ://{//< SINGLE_QUOTE_STRING_DEFAULT : "'" > : DEFAULT//}////< IN_SINGLE_QUOTE_STRING_DEFAULT >//MORE ://{//< ~["'"] >//}

//< IN_XQ > MORE ://{//< "'" > : IN_SINGLE_QUOTE_STRING_XQ//}////< IN_SINGLE_QUOTE_STRING_XQ >//TOKEN ://{//< SINGLE_QUOTE_STRING_XQ : "'" > : IN_XQ//}////< IN_SINGLE_QUOTE_STRING_XQ >//MORE ://{//< ~["'"] >//}

//Double quote processing

//< DEFAULT > MORE ://{//< "\"" > : IN_DOUBLE_QUOTE_STRING_DEFAULT//}////< IN_DOUBLE_QUOTE_STRING_DEFAULT >//TOKEN ://{//< DOUBLE_QUOTE_STRING_DEFAULT : "\"" > : DEFAULT//}////< IN_DOUBLE_QUOTE_STRING_DEFAULT >//MORE ://{//< ~["\""] >//}////////< IN_XQ > MORE ://{//< "\"" > : IN_DOUBLE_QUOTE_STRING_XQ//}////< IN_DOUBLE_QUOTE_STRING_XQ >//TOKEN ://{//< DOUBLE_QUOTE_STRING_XQ : "\"" > : IN_XQ//}////< IN_DOUBLE_QUOTE_STRING_XQ >//MORE ://{//< ~["\""] >//}

< DEFAULT , IN_URL , IN_PATH, IN_PATH_OP > SKIP :  /* IN-LINE WHITE SPACE*/{   <  SPACE :  " " >|  <  TAB : "\t" >
|  <  NEWLINE : ("\n"|"\r"|"\r\n")>
}

< DEFAULT > TOKEN : /* KEYWORDS */
{//  < XQBLOCK : "XQ:" > : IN_XQ 
//| < XQ : "XQ" >//Not great, but only time I do this
  < DATABASE : ("database") ( < SPACE > | < TAB > | < NEWLINE > )* <EQUALS_DEFAULT > > : IN_PATH
| < URL : ("url") ( < SPACE > | < TAB > | < NEWLINE > )* <EQUALS_DEFAULT > > : IN_URL
//| < PATH_URL : ("path") ( < SPACE > | < TAB > | < NEWLINE > )* < EQUALS_DEFAULT> ( < SPACE > | < TAB > | < NEWLINE > )* "{" >      : IN_URL  
| < PATH : ("path") ( < SPACE > | < TAB > | < NEWLINE > )* <EQUALS_DEFAULT > > : IN_PATH
//| < VARIABLE_DEFAULT : "$" < QNAME > ( < SPACE > | < TAB > | < NEWLINE > )* <EQUALS_DEFAULT > > : IN_PATH
| < VARIABLE_DEFAULT : < DOLLAR > < QNAME > > : DEFAULT
//| < QNAME_DEFAULT : < QNAME > ( < SPACE > | < TAB > | < NEWLINE > )* <EQUALS_DEFAULT > > : IN_PATH
| < QNAME_DEFAULT : < QNAME > > : DEFAULT
| < XQBLOCK : "Scraper" ( < SPACE > | < TAB > | < NEWLINE > )* ":" > : DEFAULT
//| < DEP : ("dep") >
//| < COMMONANCESTOR : "CA" >
//| < PROTOCOL : "http" ("s")? >
//| < DBNAMEEXT : ".cfg" >//| < OXPNAMEEXT : ".oxp" >
//| < WHILE : "while" >
//| < CLICK : "click" >//| < SUBMIT : "submit" >
}

< IN_URL > TOKEN :
{  < PROTOCOL : "http" ("s")? ":" "/" "/">
}

< IN_PATH > TOKEN :
{
//  < XQBLOCK : "Scraper" ( < SPACE > | < TAB > | < NEWLINE > )* ":" > : IN_PATH//  < XQ : "Scraper" >//Not great, but only time I do this
//| < DEP : "dep" >
  < FOCUS : "focus" > : IN_PATH
| < CLICK : "click" > : IN_PATH
| < DBLCLICK : "dblclick" > : IN_PATH
| < MOUSEDOWN : "mousedown" > : IN_PATH
| < MOUSEENTER : "mouseenter" > : IN_PATH
| < MOUSEMOVE : "mousemove" > : IN_PATH
| < MOUSEOVER : "event" > : IN_PATH
| < MOUSEOUT : "mouseout" > : IN_PATH
| < MOUSEUP : "mouseup" > : IN_PATH
| < WHEEL : "wheel" > : IN_PATH
| < SUBMIT : "submit" > : IN_PATH
| < UNCLICK : "unclick" > : IN_PATH
| < CHECK : "check" > : IN_PATH
| < UNCHECK : "uncheck" > : IN_PATH
//| < WHILE : "while" >
}

//< IN_PATH , IN_XQ > TOKEN ://{// < NAMECHAR : < NAMESTARTCHAR > | "-" | "." | ["0"-"9"] >//}

< IN_URL > TOKEN :
{
  < END_URL_IN_PATH : ">" > : IN_PATH
//  < END_URL_IN_PATH : ">" ( < SPACE > | < TAB > | < NEWLINE > )* "/" ( < SPACE > | < TAB > | < NEWLINE > )* "}" > : IN_PATH | < END_URL : "}" > : IN_PATH
| < SLASH_URL : "/" >
| < QUESTION_URL : "?" >
| < MINUS_URL : "-" >
| < UNDERSCORE_URL : "_" >
| < PERIOD_URL : "." >
| < AMPERSAND_URL : "&" >
| < EQUALS_URL : "=" >
| < DOLLAR_URL : "$" >
| < PERCENT_URL : "%" >
| < AT_URL : "@" >
| < PLUS_URL : "+" >
| < EXCLAIMATION_URL : "!" >
| < STAR_URL : "*" >
| < OPEN_PARAN_URL : "(" >
| < CLOSE_PARAN_URL : ")" >
| < COMMA_URL : "," >
}

< IN_URL > TOKEN : /* VALUE RETURNS FOR URL Expression */
{
  < LOWER_ALPHA : ["a"-"z"] >
| < UPPER_ALPHA : ["A"-"Z"] >
| < DIGIT : ["0"-"9"] >
}

< DEFAULT, IN_PATH, IN_PATH_OP, IN_URL > TOKEN : /* Handling line terminals */
	{	  < ENDLINE : ";" > : DEFAULT
	}

//	< IN_XQ > TOKEN : /* Handling line terminals//	          Need to transition state to default until IN_XQ, then stay in XQ *///	{//	  < ENDLINE_XQ : ";" >//	}	       
< DEFAULT > TOKEN :
{
//  < URL_PATH : "=" ( < SPACE > | < TAB > | < NEWLINE > )* "{" >      : IN_URL  < EQUALS_DEFAULT : "=" > : IN_PATH
//| < VARIABLE_DEFAULT : "$" < QNAME > > : IN_PATH_OP
}

< IN_PATH , IN_PATH_OP > TOKEN : /* EXPR TOKEN */
{
  < DOC_BEGIN : "doc" ( < SPACE > | < TAB > | < NEWLINE > )* "(" > : IN_PATH
| < OPEN_PARAN : "(" > : IN_PATH
| < CLOSE_PARAN : ")" > : IN_PATH_OP
| < OPEN_OPTIONAL : "[?" > : IN_PATH
| < OPEN_BRACKET : "[" > : IN_PATH
| < CLOSE_BRACKET : "]" > : IN_PATH_OP
| < BEGIN_URL_IN_PATH : "{" ( < SPACE > | < TAB > | < NEWLINE > )* "<" > : IN_URL
| < OPEN_CURLY : "{" > : IN_PATH
| < CLOSE_CURLY : "}" > :IN_PATH
//| < END_ABSOLUTE_ACTION : < SLASH > ( < SPACE > | < TAB > | < NEWLINE > )* < CLOSE_CURLY > > : IN_PATH
| < COMMA : "," > : IN_PATH
| < NUMBER : (< DIGITS > "." (< DIGITS >)?) | ("." < DIGITS >) > : IN_PATH_OP//Integers are returned as <DIGITS > tokens
//| < LITERAL : < SINGLE_QUOTE_STRING_PATH > | < DOUBLE_QUOTE_STRING_PATH > > : IN_PATH_OP
| < DESCENDENT_OR_SELF_SHORT : "/" ( < SPACE > | < TAB > | < NEWLINE > )* "/" > : IN_PATH
| < BEGIN_KLEENE_STAR : "/" ( < SPACE > | < TAB > | < NEWLINE > )* "(" > : IN_PATH
| < SLASH : "/" > : IN_PATH
| < BEGIN_EXTRACT_MARK : ":<" > : IN_PATH
//| < END_EXTRACT_MARK : ">" ( < SPACE > | < TAB > | < NEWLINE > )* ":" > : IN_PATH
//| < END_PATH : "/" ( < SPACE > | < TAB > | < NEWLINE > )* "<" > : IN_PATH
//| < ACTION_PRED :( < WAIT > | < UNTIL > ) > : IN_PATH

}

< IN_PATH > TOKEN : /* EXPR TOKEN */
{
  < OXPATH_AXISNAME : ( "style"
//    	             | "next-field" 
//                 | "descendant-or-following-field"
                 | "descendant-or-following"
//                 | "previous-field"
//                 | "ancestor-or-preceding-field"
                 | "ancestor-or-preceding" ) ( < SPACE > | < TAB > | < NEWLINE > )* < AXIS > > : IN_PATH
//AXES WITHOUT DIRECTION ARE FORWARD AXEs  
| < XPATH_FORWARD_AXISNAME : ( //"ancestor-or-self"
//                 | "ancestor" |
	                   "attribute"
                 | "child"
                 | "descendant-or-self"
                 | "descendant"
                 | "following-sibling"
                 | "following"
                 | "namespace"
//                 | "parent"
//                 | "preceding-sibling"
//                 | "preceding"
                 | "self" ) ( < SPACE > | < TAB > | < NEWLINE > )* < AXIS > > : IN_PATH
| < XPATH_BACKWARD_AXISNAME : ( "ancestor-or-self"
                 | "ancestor"
//                 | "attribute"
//                 | "child"
//                 | "descendent-or-self"
//                 | "descendent"
//                 | "following-sibling"
//                 | "following"
//                 | "namespace"
                 | "parent"
                 | "preceding-sibling"
                 | "preceding"
//                 | "self"
                 ) ( < SPACE > | < TAB > | < NEWLINE > )* < AXIS > > : IN_PATH
| < AXIS : "::" > : IN_PATH
| < NODE_TYPE : ( < COMMENT > | < TEXT > | < PROCESSING_INSTRUCTION > | < NODE > ) ( < SPACE > | < TAB > | < NEWLINE > )* < OPEN_PARAN > > : IN_PATH
| < NODE_TYPE_OXPATH : ( < FIELD > | < ANY_FIELD > ) ( < SPACE > | < TAB > | < NEWLINE > )* < OPEN_PARAN > > : IN_PATH
| < PERIOD : "." > : IN_PATH_OP
| < PARENT_SHORT : ".." > : IN_PATH_OP
| < AT : "@" > : IN_PATH
| < FUNCTION_NAME : < QNAME > ( < SPACE > | < TAB > | < NEWLINE > )* < OPEN_PARAN > > : IN_PATH
//| < NAME_TEST : ( "*" | (< NCNAME > < COLON > "*") | < QNAME > ) > : IN_PATH_OP//NAME_TEST not used as tokens (rather production rule) because TokenManager NFA is too big for Java
| < VARIABLE : < DOLLAR > <QNAME > > : IN_PATH_OP
| < END_EXTRACT_MARK : ">" > : IN_PATH
}

< IN_PATH_OP > TOKEN : /* EXPR TOKEN */
{
  < AND : "and" > : IN_PATH| < OR : "or" > : IN_PATH| < MOD : "mod" > : IN_PATH| < DIV : "div" > : IN_PATH| < MULTIPLY : "*" > : IN_PATH//| < DESCENDENT_OR_SELF_SHORT : "/" "/" > : IN_PATH//| < SLASH : "/" > : IN_PATH| < UNION : "|" > : IN_PATH| < PLUS : "+" > : IN_PATH| < MINUS : "-" > : IN_PATH| < LESSTE : "<=" > : IN_PATH| < LESS : "<" > : IN_PATH| < GREATERTE : ">=" > : IN_PATH| < GREATER : ">" > : IN_PATH| < NOTEQUAL : "!=" > : IN_PATH| < EQUALS : "=" > : IN_PATH
| < PERIOD_OP : "." > : IN_PATH
| < HASH : "#" >   : IN_PATH
| < WORD_TEST : "~=" > : IN_PATH
| < CONTAINS : "#=" > : IN_PATH
  //  < OPERATOR : ( < AND >//               | < OR >//               | < MOD >//               | < DIV >//               | < MULTIPLY >//               | < DESCENDENT_OR_SELF_SHORT >//               | < SLASH >//               | < UNION >//               | < PLUS >//               | < MINUS >//               | < LESSTE >//               | < LESS >//               | < GREATERTE >//               | < GREATER >//               | < NOTEQUAL >//               | < EQUALS > )> : IN_PATH}

< IN_PATH > TOKEN : /* NODE TYPE */
{  < PROCESSING_INSTRUCTION : "processing-instruction" >
| < COMMENT : "comment" >
| < TEXT : "text" >
| < NODE : "node" >
}

< IN_PATH > TOKEN : /* NODE TEST */
{  < FIELD : "field" >
| < ANY_FIELD : "any-field" >
}

< IN_PATH, IN_PATH_OP > TOKEN : /* ACTION KEY WORDS */
{
  < WAIT : "wait" ( < SPACE > | < TAB > | < NEWLINE > )* "=" > 
| < UNTIL : "until" ( < SPACE > | < TAB > | < NEWLINE > )* "=" > 
}

//< IN_PATH_OP > TOKEN : /* OPERATOR *///{//  < AND : "and" >//| < OR : "or" >//| < MOD : "mod" >//| < DIV : "div" >//| < MULTIPLY : "*" >//| < DESCENDENT_OR_SELF_SHORT : "/" "/" >//| < SLASH : "/" >//| < UNION : "|" >//| < PLUS : "+" >//| < MINUS : "-" >//| < LESSTE : "<=" >//| < LESS : "<" >//| < GREATERTE : ">=" >//| < GREATER : ">" >//| < NOTEQUAL : "!=" > //| < EQUALS : "=" >//}

< IN_PATH > TOKEN : /*VARIABLE*/
{  < DOLLAR : "$" > : IN_PATH
}

< IN_PATH > TOKEN : /* NAME_TEST */
{
  < WILDCARD : "*" > : IN_PATH_OP
| < WILDCARD_BOUNDED : (< NCNAME > < COLON > < WILDCARD >) > : IN_PATH_OP
| < QNAME : < NCNAME > (< COLON > < NCNAME >)? > : IN_PATH_OP
| < NCNAME : < NAMESTARTCHAR > (< NAMESTARTCHAR > | "-" | ["0"-"9"])* > //period removed to allow for use of CSS class operator
//| < NCNAME : < NAMESTARTCHAR > (< NAMESTARTCHAR > | "-" | "." | ["0"-"9"])* > 
| < NAMESTARTCHAR : ["A"-"Z"] | ["a"-"z"] | "_" >
| < COLON : ":" >
}

< IN_PATH > TOKEN : /* NUMBER */
{  < DIGITS : (["0"-"9"])+ >
}

//< IN_PATH > TOKEN : /* OXPath/XPath AXIS NAME, disguised and made anonymous above to get rid of javacc warnings *///{//  < NEXT_FIELD : "next-field" >//| < FOLLOWING_FIELD : "following-field" >//| < PREVIOUS_FIELD : "previous-field" >//| < PRECEDING_FIELD : "preceding-field" >//  //| < ANCESTOR_OR_SELF : "ancestor-or-self" >//| < ANCESTOR : "ancestor" >//| < ATTRIBUTE : "attribute" >//| < CHILD : "child" >//| < DESCENDENT_OR_SELF : "descendent-or-self" >//| < DESCENDENT : "descendent" >//| < FOLLOWING_SIBLING : "following-sibling" >//| < FOLLOWING : "following" >//| < NAMESPACE : "namespace" >//| < PARENT : "parent" >//| < PRECEDING_SIBLING : "preceding-sibling" >//| < PRECEDING : "preceding" >//| < SELF : "self" >//}

< IN_PATH > MORE :
{
< "\"" > : IN_DOUBLE_QUOTE_STRING_PATH
}

< IN_DOUBLE_QUOTE_STRING_PATH >
TOKEN :
{
< DOUBLE_QUOTE_STRING_PATH : "\"" > : IN_PATH_OP
}

< IN_DOUBLE_QUOTE_STRING_PATH >
MORE :
{
< ~["\""] >
}

< IN_PATH > MORE :
{
< "'" > : IN_SINGLE_QUOTE_STRING_PATH
}

< IN_SINGLE_QUOTE_STRING_PATH >
TOKEN :
{
< SINGLE_QUOTE_STRING_PATH : "'" > : IN_PATH_OP
}

< IN_SINGLE_QUOTE_STRING_PATH >
MORE :
{
< ~["'"] >
}
//SimpleNode Start() ://{}//{//  Script()//  {//    return jjtThis;//  }//}

SimpleNode Script() :
{/*@bgen(jjtree) Script */
  SimpleNode jjtn000 = new SimpleNode(JJTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Script */
  try {
/*@egen*/
  ( PathDeclaration() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
//  OXPathPathSegment()
//  Declarations() < XQBLOCK >  XQDeclarations() < EOF >
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Declarations() :
{/*@bgen(jjtree) Declarations */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declarations */
  try {
/*@egen*/
  (    DatabaseDeclaration() | URLDeclaration() | VariableDeclaration()
   )*
   (PathDeclaration())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void XQDeclarations() :
{/*@bgen(jjtree) XQDeclarations */
  SimpleNode jjtn000 = new SimpleNode(JJTXQDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XQDeclarations */
  try {
/*@egen*/
//  ( CommonAncestorDeclaration() | ScrapeDeclaration() )+
  ( ScrapeDeclaration() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DatabaseDeclaration()      :
{}
{
  < DATABASE > DatabaseFileName() < ENDLINE >}

void DatabaseFileName() :
{/*@bgen(jjtree) DatabaseFileName */
 SimpleNode jjtn000 = new SimpleNode(JJTDATABASEFILENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String subtree;}
{/*@bgen(jjtree) DatabaseFileName */
          try {
/*@egen*///  Letter() ( Letter() | < DIGIT > | < PLUS > | < UNDERSCORE > | < TILDE > )* < DBNAMEEXT >
	  subtree = XPathLiteral()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/	  { process(jjtn000,subtree); }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

String Letter() :
{/*@bgen(jjtree) Letter */
 SimpleNode jjtn000 = new SimpleNode(JJTLETTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Letter */
 try {
/*@egen*/ ( t = < UPPER_ALPHA >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,t.image);} )
 | ( t = < LOWER_ALPHA >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {return process(jjtn000,t.image);} )/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void URLDeclaration()      :
{}
{
  < URL > URLName() < ENDLINE >
}

String URLName() :
{/*@bgen(jjtree) URLName */
 SimpleNode jjtn000 = new SimpleNode(JJTURLNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String sp;
 String hp;
 Token t1;
 String up;
 Token t2;
 String us;}
{/*@bgen(jjtree) URLName */
  try {
/*@egen*///adapted from w3c BNF grammar for BNF located @ http://www.w3.org/Addressing/URL/5_BNF.html#z18
  sp = SupportedProtocols() hp = HostPort() {sb.append(sp); sb.append(hp);}
  [ t1 = < SLASH_URL >  up = URLPath() {sb.append(t1.image); sb.append(up);} ]
  [ t2 = < QUESTION_URL > us = URLSearch() {sb.append(t2.image); sb.append(us);} ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//SupportedProtocols() HostPort() [LOOKAHEAD(< SLASH > URLPath()) < SLASH > URLPath() | < SLASH > ] [ < QUESTION_URL > URLSearch() ]
}

String SupportedProtocols() :
{/*@bgen(jjtree) SupportedProtocols */
 SimpleNode jjtn000 = new SimpleNode(JJTSUPPORTEDPROTOCOLS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) SupportedProtocols */
  try {
/*@egen*///current supported protocols of http and https  t = < PROTOCOL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//  < COLON > < DESCENDENT_OR_SELF_SHORT >}

String HostPort() :
{/*@bgen(jjtree) HostPort */
 SimpleNode jjtn000 = new SimpleNode(JJTHOSTPORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String h;
 Token t;
 String p;}
{/*@bgen(jjtree) HostPort */
  try {
/*@egen*/  h = Host() {sb.append(h);} [ t = < COLON > p = Port() {sb.append(t.image); sb.append(p);} ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Host() :
{/*@bgen(jjtree) Host */
 SimpleNode jjtn000 = new SimpleNode(JJTHOST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String subtree;}
{/*@bgen(jjtree) Host */
  try {
/*@egen*/  (subtree = HostName()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return process(jjtn000,subtree);} )   | ( subtree = HostNumber()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {return process(jjtn000,subtree);})/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

String HostName() :
{/*@bgen(jjtree) HostName */
 SimpleNode jjtn000 = new SimpleNode(JJTHOSTNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String subtree;}
{/*@bgen(jjtree) HostName */
  try {
/*@egen*/  subtree = URLIAlpha()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return process(jjtn000,subtree);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*///[ < PERIOD > HostName() ]}

String URLIAlpha() :
{/*@bgen(jjtree) URLIAlpha */
 SimpleNode jjtn000 = new SimpleNode(JJTURLIALPHA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder st = new StringBuilder();
 String l;
 String u;}
{/*@bgen(jjtree) URLIAlpha */
  try {
/*@egen*/  l=Letter() {st.append(l);} [ u=URLXAlphas() {st.append(u);} ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,st.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String URLXAlphas() :
{/*@bgen(jjtree) URLXAlphas */
 SimpleNode jjtn000 = new SimpleNode(JJTURLXALPHAS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String u;
 String us;}
{/*@bgen(jjtree) URLXAlphas */
 try {
/*@egen*/ u = URLXAlpha() {sb.append(u);} [ us = URLXAlphas() {sb.append(us);} ]/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {return process(jjtn000,(sb.toString()));}/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

String URLXAlpha() :
{/*@bgen(jjtree) URLXAlpha */
 SimpleNode jjtn000 = new SimpleNode(JJTURLXALPHA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;
 Token t;}
{/*@bgen(jjtree) URLXAlpha */
          try {
/*@egen*/	  s=Letter()/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {return process(jjtn000,s);}
	| t=< DIGIT >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {return process(jjtn000,t.image);}
	| s=URLSafe()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {return process(jjtn000,s);}
	| s=URLExtra()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,s);}
	| s=URLEscape()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

String URLSafe() :
{/*@bgen(jjtree) URLSafe */
 SimpleNode jjtn000 = new SimpleNode(JJTURLSAFE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) URLSafe */
  try {
/*@egen*/  t=< DOLLAR_URL >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< MINUS_URL >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< UNDERSCORE_URL >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< AT_URL >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< PERIOD_URL >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< AMPERSAND_URL >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< PLUS_URL >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,t.image);}| t=< EQUALS_URL >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*///not part of the grammar; in practice, however, <EQUALS_URL> is URL safe  
}
String URLExtra() :
{/*@bgen(jjtree) URLExtra */
 SimpleNode jjtn000 = new SimpleNode(JJTURLEXTRA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) URLExtra */
  try {
/*@egen*/
  t=< EXCLAIMATION_URL >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< STAR_URL >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< QUOTE_URL >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< APOSTROPHE_URL >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< OPEN_PARAN_URL >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< CLOSE_PARAN_URL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< COMMA_URL >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

String URLEscape() :
{/*@bgen(jjtree) URLEscape */
 SimpleNode jjtn000 = new SimpleNode(JJTURLESCAPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) URLEscape */
  try {
/*@egen*/
  t=< PERCENT_URL >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String HostNumber() :
{/*@bgen(jjtree) HostNumber */
 SimpleNode jjtn000 = new SimpleNode(JJTHOSTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s1;
 Token t1;
 String s2;
 Token t2;
 String s3;
 Token t3;
 String s4;}
{/*@bgen(jjtree) HostNumber */
  try {
/*@egen*/  s1=Digits() t1=< PERIOD_URL > s2=Digits() t2=< PERIOD_URL > s3=Digits() t3=< PERIOD_URL > s4=Digits()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {StringBuilder sb = new StringBuilder();
   sb.append(s1);
   sb.append(t1);
   sb.append(s2);
   sb.append(t2);
   sb.append(s3);
   sb.append(t3);
   sb.append(s4);
   return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Digits() :
{/*@bgen(jjtree) Digits */
 SimpleNode jjtn000 = new SimpleNode(JJTDIGITS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;
 StringBuilder sb = new StringBuilder();}
{/*@bgen(jjtree) Digits */
  try {
/*@egen*/  (    t=< DIGIT > {sb.append(t.image);}
  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}  

String Port() :
{/*@bgen(jjtree) Port */
 SimpleNode jjtn000 = new SimpleNode(JJTPORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}{/*@bgen(jjtree) Port */
  try {
/*@egen*/  s=Digits()/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {process(jjtn000,s); return getValue(jjtn000);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String URLPath() :
{/*@bgen(jjtree) URLPath */
 SimpleNode jjtn000 = new SimpleNode(JJTURLPATH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;}
{/*@bgen(jjtree) URLPath */
  try {
/*@egen*/
  [s1=URLSegment() {sb.append(s1);} [ t=< SLASH_URL > s2=URLPath() {sb.append(t.image); sb.append(s2);} ]]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,(sb.toString()));}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//  URLSegment() [< SLASH > URLPath()]
}

String URLSegment() :
{/*@bgen(jjtree) URLSegment */
 SimpleNode jjtn000 = new SimpleNode(JJTURLSEGMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) URLSegment */
  try {
/*@egen*/  s=URLXAlphas()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String URLSearch() :
{/*@bgen(jjtree) URLSearch */
 SimpleNode jjtn000 = new SimpleNode(JJTURLSEARCH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) URLSearch */
  try {
/*@egen*/
  s=URLXAlphas()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  //[ < PLUS > URLSearch() ]
}

SimpleNode VariableDeclaration() :
{/*@bgen(jjtree) VariableDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
  try {
/*@egen*/
  VariableName() <EQUALS_DEFAULT > OXPathPathSegment() < ENDLINE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String VariableName() :
{/*@bgen(jjtree) VariableName */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VariableName */
try {
/*@egen*///  < DOLLAR > < LOWER_ALPHA > ( Letter() | < DIGIT > | < UNDERSCORE_URL > )*
( t=< VARIABLE >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,t.image);} )
| ( t=< VARIABLE_DEFAULT >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {return process(jjtn000,t.image);} )/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void PathDeclaration() :
{/*@bgen(jjtree) PathDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPATHDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PathDeclaration */
  try {
/*@egen*/
  < PATH > OXPathPathSegment() < ENDLINE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//  ( < PATH > | OXPathURL() ) OXPathPathSegment() < ENDLINE >
}

//void OXPathURL() #void://{}//{//  < PATH_URL >  URLName()  < END_URL > //}

//void OXPathPathSegmentEntry() ://{Token t1;// String s1;// String s2;// Token t2;// Token t3;// String s3;// StringBuilder sb = new StringBuilder();// }//{//replaces OXPathPathSegment for initial entry//  (//    ( ( t1=< SLASH > s1=RelativeOXPathLocationPath() {sb.append(t1.image); sb.append(s1);})? t2=< END_PATH > {sb.append(t2.image);}) // <END_PATH > Token distributed inside choice so that no empty choice occurs//   | (s1=AbbreviatedAbsoluteOXPathLocationPath() t2=< END_PATH > {sb.append(s1); sb.append(t2.image);})//  )//  s2=OXPathTerminal() {sb.append(s2);}//  ( (t3=< SLASH > {sb.append(t3.image);} (s3=RelativeOXPathLocationPath() {sb.append(s3);})? ) | s3=AbbreviatedAbsoluteOXPathLocationPath() {sb.append(s3);})//  {process(jjtThis,sb.toString());}//}////String OXPathTerminal() ://{StringBuilder sb = new StringBuilder();// String s;// Token t1;// Token t2;// Token t3;}//{//  t1=< XQ > {sb.append(t1.image);} [ t2=< WHILE > s=XPathQName() {sb.append(t2.image); sb.append(s);}] t3=< GREATER > {sb.append(t3.image);}//  {return process(jjtThis,sb.toString());}//}

String OXPathPathSegment()                       ://Adapted in part from the grammar in http://www.w3.org/TR/xpath/, adapted to be LL(1)
{/*@bgen(jjtree) #OXPathPathSegment(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHPATHSEGMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s;
 Token t;}
{/*@bgen(jjtree) #OXPathPathSegment(> 1) */
  try {
/*@egen*///don't support relative location paths for start  (s=RelativeOXPathLocationPath() {sb.append(s);}
| (//    < SLASH >  (LOOKAHEAD(2) RelativeOXPathLocationPath())?
		      t=< SLASH > {sb.append(t.image);} (s=RelativeOXPathLocationPath() {sb.append(s);} )?
  )
|
  s=AbbreviatedAbsoluteOXPathLocationPath() {sb.append(s);} )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,(sb.toString()));}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
//|//  < LESS > < XQ > [ < WHILE > ScraperName()] < GREATER >
}

String RelativeOXPathLocationPath() :
{/*@bgen(jjtree) RelativeOXPathLocationPath */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIVEOXPATHLOCATIONPATH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s2;
 Token t;
 String s3;
 String s4; }
{/*@bgen(jjtree) RelativeOXPathLocationPath */
  try {
/*@egen*/
  s1=OXPathStep() {sb.append(s1);} [s2=OXPathKleeneStar() {sb.append(s2);}]
  [ (t=< SLASH > {sb.append(t.image);} | s4=DescendantOrSelfShort() {sb.append(s4);} ) s3=RelativeOXPathLocationPath() {sb.append(s3);} ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String DescendantOrSelfShort() :
{/*@bgen(jjtree) DescendantOrSelfShort */
 SimpleNode jjtn000 = new SimpleNode(JJTDESCENDANTORSELFSHORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DescendantOrSelfShort */
  try {
/*@egen*/  t=< DESCENDENT_OR_SELF_SHORT >/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathKleeneStar() :
{/*@bgen(jjtree) OXPathKleeneStar */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHKLEENESTAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s3;
 Token t1;
 Token t2;
 Token t3;
 Token t4;
 Token t5;
 String s4;}
{/*@bgen(jjtree) OXPathKleeneStar */
  try {
/*@egen*/
  //Overload the Multiply operator for Kleene star
  t1=< BEGIN_KLEENE_STAR > s3=OXPathPathSegment() t2=< CLOSE_PARAN > {sb.append(t1.image); sb.append(s3); sb.append(t2.image);}
  (t3=< MULTIPLY > {sb.append(t3.image);} | 
  t4=< OPEN_CURLY > s4=OXPathKleeneStarPredicate() t5=< CLOSE_CURLY > {sb.append(t4.image); sb.append(s4); sb.append(t5.image);})/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathKleeneStarPredicate() :
{/*@bgen(jjtree) OXPathKleeneStarPredicate */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHKLEENESTARPREDICATE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;}
{/*@bgen(jjtree) OXPathKleeneStarPredicate */
  try {
/*@egen*/
  s1=OXPathKleeneStarPredicateArg() {sb.append(s1);}
  [ t=<COMMA > {sb.append(t.image);}
  [ s2=OXPathKleeneStarPredicateArg() {sb.append(s2);} ]]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String OXPathKleeneStarPredicateArg() :
{/*@bgen(jjtree) OXPathKleeneStarPredicateArg */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHKLEENESTARPREDICATEARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OXPathKleeneStarPredicateArg */
  try {
/*@egen*/  t=< DIGITS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathStep() :
{/*@bgen(jjtree) OXPathStep */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHSTEP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s1;
 String s2;
 String s3;
 String s4;
 StringBuilder sb = new StringBuilder();}
{/*@bgen(jjtree) OXPathStep */
try {
/*@egen*/(  ( (([ ( s1=XPathAxisSpecifier() | s1=OXPathAxisSpecifier() ) {sb.append(s1);} ]
   ( s2=XPathNodeTest() | s2=OXPathNodeTest() ) {sb.append(s2);})
| s1=AbbreviatedStep() {sb.append(s1);})      ( ( s3=OXPathNodeTestOp() | s3=XPathPredicate() | s3=OXPathOptionalPredicate() | s3=OXPathExtractionMarker() ) {sb.append(s3);} )* )
//| ( s1=OXPathAxisSpecifier() s2=OXPathNodeTest() {sb.append(s1); sb.append(s2);} (s3=OXPathPredicate() {sb.append(s3);} )* )
| s1=VariableName() {sb.append(s1);}
| s1=OXPathAction() {sb.append(s1);} )/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
//( s4=OXPathExtractionMarker() {sb.append(s4);})?
{return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

String XPathAxisSpecifier() :
{/*@bgen(jjtree) XPathAxisSpecifier */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHAXISSPECIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}{/*@bgen(jjtree) XPathAxisSpecifier */
  try {
/*@egen*/  ( s=XPathForwardAxisName() | s=XPathBackwardAxisName() | s=XPathAbbreviatedAxisSpecifier() )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathAxisSpecifier()                         :
{/*@bgen(jjtree) #OXPathAxisSpecifier(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHAXISSPECIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #OXPathAxisSpecifier(> 1) */
  try {
/*@egen*/
  s=OXPathAxisName()/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                       jjtc000 = false;
                     }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathForwardAxisName() :
{/*@bgen(jjtree) XPathForwardAxisName */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHFORWARDAXISNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathForwardAxisName */
  try {
/*@egen*/  t=< XPATH_FORWARD_AXISNAME >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String XPathBackwardAxisName() :
{/*@bgen(jjtree) XPathBackwardAxisName */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHBACKWARDAXISNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathBackwardAxisName */
  try {
/*@egen*/
  t=< XPATH_BACKWARD_AXISNAME >/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathAxisName() :
{/*@bgen(jjtree) OXPathAxisName */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHAXISNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OXPathAxisName */
  try {
/*@egen*/  t=< OXPATH_AXISNAME >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathAbbreviatedAxisSpecifier() :
{/*@bgen(jjtree) XPathAbbreviatedAxisSpecifier */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHABBREVIATEDAXISSPECIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathAbbreviatedAxisSpecifier */
  try {
/*@egen*/  t=< AT >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathNodeTest() :
{/*@bgen(jjtree) XPathNodeTest */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHNODETEST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s2;
 Token t1;
 Token t2;}
{/*@bgen(jjtree) XPathNodeTest */
  try {
/*@egen*///needs semantic check to make sure xpathliteral parameter only specified for processing-instruction node types  ( s1=XPathNameTest()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,s1);}
  //[s2=OXPathNodeTestOp() {sb.append(s2);}])
  )
| ( t1=< NODE_TYPE > {sb.append(t1.image);} ( s1=XPathLiteral() {sb.append(s1);} )? t2=<CLOSE_PARAN >
  {sb.append(t2.image);} )/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathNodeTest() :
{/*@bgen(jjtree) OXPathNodeTest */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHNODETEST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t1;
 Token t2;}
{/*@bgen(jjtree) OXPathNodeTest */
  try {
/*@egen*///needs semantic check to make sure xpathliteral parameter only specified for processing-instruction node types
//  s1=OXPathNameTest() {return process(jjtThis,s1);} |
  ( t1=< NODE_TYPE_OXPATH > {sb.append(t1.image);}
//  ( s1=XPathLiteral() {sb.append(s1);} )?
  t2=<CLOSE_PARAN > {sb.append(t2.image);} )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathNodeTestOp() :
{/*@bgen(jjtree) OXPathNodeTestOp */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHNODETESTOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s;}
{/*@bgen(jjtree) OXPathNodeTestOp */
  try {
/*@egen*/  s1=OXPathNodeTestOper() {sb.append(s1);} s=XPathQName()/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {sb.append(s); return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

String OXPathNodeTestOper() :
{/*@bgen(jjtree) OXPathNodeTestOper */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHNODETESTOPER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OXPathNodeTestOper */
  try {
/*@egen*/  ( t=< PERIOD_OP > | t=< HASH > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathNameTest() :
{/*@bgen(jjtree) XPathNameTest */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHNAMETEST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;
 String s;}
{/*@bgen(jjtree) XPathNameTest */
  try {
/*@egen*/
  t=< WILDCARD >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< WILDCARD_BOUNDED >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {return process(jjtn000,t.image);}
| s=XPathQName()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*///  < STAR > | ( XPathNCName() < COLON > < STAR > ) | XPathQName()
//  < WILDCARD > | ( XPathNCName() ( < COLON > < WILDCARD > )? ) | XPathQName()
//  < NAME_TEST >}

String XPathQName() :
{/*@bgen(jjtree) XPathQName */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHQNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathQName */
  try {
/*@egen*/
  t=< QNAME >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//String XPathNCName() ://{Token t;}//{//  t=< NCNAME > {return process(jjtThis,t.image);}//}

//void XPathQName() ://{}//{//  < NCNAME > ( < COLON > < NCNAME > )?//}

//void XPathNodeType() ://{}//{//  < COMMENT > | < TEXT > | < PROCESSING_INSTRUCTION > | < NODE >//}

String XPathLiteral() :
{/*@bgen(jjtree) XPathLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathLiteral */
  try {
/*@egen*/  ( t = < DOUBLE_QUOTE_STRING_PATH >/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {return process(jjtn000,t.image);} )  	                                       
  |
  ( t = < SINGLE_QUOTE_STRING_PATH >/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {return process(jjtn000,t.image);} )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//  {return (String) jjtThis.jjtGetValue();}
//| < DOUBLE_QUOTE_STRING_XQ > | < SINGLE_QUOTE_STRING_XQ >
}

//String OXPathNodeTest() #OXPathNodeTest(>1)://{String s;}//{//no semantic meaning to nodetype tests for OXPath additional axes////  XPathNameTest() | ( XPathNodeType() < OPEN_PARAN > ( XPathLiteral() ) ? <CLOSE_PARAN > )//  s=OXPathNameTest() {return process(jjtThis,s);}//}

//String OXPathNameTest() ://{Token t;// String s;}//{////  < WILDCARD > | ( XPathNCName() ( < COLON > ( < WILDCARD > | XPathNCName() ) )? )////< NAME_TEST >//  t=< WILDCARD > {return process(jjtThis,t.image);}//| t=< WILDCARD_BOUNDED > {return process(jjtThis,t.image);}//| s=XPathQName() {return process(jjtThis,s);}//}

//String AnyPredicate() #AnyPredicate(>1)://{StringBuilder sb = new StringBuilder();// Token t1;// String s;// Token t2;}//{//  t1=< OPEN_BRACKET > s=XPathPredicateExpr() t2=< CLOSE_BRACKET >//  {sb.append(t1.image); sb.append(s); sb.append(t2);//  return process(jjtThis,sb.toString());}
//}


String XPathPredicate() :
{/*@bgen(jjtree) XPathPredicate */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHPREDICATE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s;
 Token t2;}
{/*@bgen(jjtree) XPathPredicate */
  try {
/*@egen*/  t1=< OPEN_BRACKET > s=XPathPredicateExpr() t2=< CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {sb.append(t1.image); sb.append(s); sb.append(t2);
   return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathOptionalPredicate() :
{/*@bgen(jjtree) OXPathOptionalPredicate */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHOPTIONALPREDICATE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s;
 Token t2;}
{/*@bgen(jjtree) OXPathOptionalPredicate */
  try {
/*@egen*/  t1=< OPEN_OPTIONAL > s=XPathPredicateExpr() t2=< CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {sb.append(t1.image); sb.append(s); sb.append(t2);
  return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String OXPathPredicate() ://{StringBuilder sb = new StringBuilder();// Token t1;// String s;// Token t2;}//{////  < OPEN_BRACKET > OXPathPredicateExpr() < CLOSE_BRACKET >//  t1=< OPEN_BRACKET > s=XPathPredicateExpr() t2=< CLOSE_BRACKET >//  {sb.append(t1.image); sb.append(s); sb.append(t2);//   return process(jjtThis,sb.toString());}//}

String XPathPredicateExpr()                        :
{/*@bgen(jjtree) #XPathPredicateExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHPREDICATEEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #XPathPredicateExpr(> 1) */
  try {
/*@egen*/  s=XPathExpr()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  jjtc000 = false;
                }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String OXPathPredicateExpr() :
//{Token t;}//  t=< DIGITS > {return process(jjtThis,t.image);}
{/*@bgen(jjtree) OXPathPredicateExpr */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHPREDICATEEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s;
 Token t2;}
{/*@bgen(jjtree) OXPathPredicateExpr */
  try {
/*@egen*/
  t1=< OPEN_BRACKET > s=XPathPredicateExpr() t2=< CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {sb.append(t1.image); sb.append(s); sb.append(t2);
   return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String OXPathAction() ://{StringBuilder sb = new StringBuilder();// Token t1;// String s1;// Token t2;// String s2;// Token t3;}//{//  t1=< OPEN_CURLY > {sb.append(t1.image);} (s1=OXPathAttributeDeclaration() t2=< EQUALS > {sb.append(s1); sb.append(t2.image);} )?//  s2=UnGroundedOXPathActionDeclaration() t3=< CLOSE_CURLY > {sb.append(s2); sb.append(t3.image); return process(jjtThis,sb.toString());}//}

String OXPathAction()                  :
{/*@bgen(jjtree) #OXPathAction(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHACTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #OXPathAction(> 1) */
  try {
/*@egen*/  ( s=OXPathURLAction() | s=OXPathUserAction())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/  {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/ 
}

String OXPathURLAction() ://TODO: Change syntax to doc("url")
{/*@bgen(jjtree) OXPathURLAction */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHURLACTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s;
 Token t2;
 Token t3;
 Token t4;
 String s1;}
{/*@bgen(jjtree) OXPathURLAction */
  try {
/*@egen*/
  t1=< BEGIN_URL_IN_PATH > s=URLName() t2= < END_URL_IN_PATH >
  {
    sb.append(t1.image);
    sb.append(s);
    sb.append(t2.image);  }
  [s1 = OXPathActionPred() {sb.append(s1);}]
  t3 = < SLASH > t4 = < CLOSE_CURLY >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    sb.append(t3.image);
    sb.append(t4.image);
    return process(jjtn000,sb.toString());
  }
| t1=< DOC_BEGIN > s=XPathLiteral() 
  {
    sb.append(t1.image);
    sb.append(s);
  }
  [s1 = OXPathActionPred() {sb.append(s1);}]
  t2=< CLOSE_PARAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    sb.append(t2.image);
    return process(jjtn000,sb.toString());
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/} 


String OXPathUserAction() :
{/*@bgen(jjtree) OXPathUserAction */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHUSERACTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s1;
 String s2;
 Token t2;
 String s3;}
{/*@bgen(jjtree) OXPathUserAction */
  try {
/*@egen*/
  t1=< OPEN_CURLY > {sb.append(t1.image);}
  ( s1=UnGroundedOXPathActionPosition()
  | s1=GroundedOXPathActionExplicit()
  | s1=OXPathActionKeyword() ) {sb.append(s1);}
//  s1=UnGroundedOXPathActionDeclaration() {sb.append(s1);}
  [ s3 = OXPathActionPred() {sb.append(s3);} ]
  [ s2=OXPathAbsoluteActionSignal() {sb.append(s2);} ]
  t2=< CLOSE_CURLY >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {sb.append(t2.image); return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathActionPred()                      :
{/*@bgen(jjtree) #OXPathActionPred(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHACTIONPRED);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s;
 Token t2;}
{/*@bgen(jjtree) #OXPathActionPred(> 1) */
  try {
/*@egen*/  t1=< OPEN_BRACKET > ( s=OXPathActionWaitPred() | s=OXPathActionUntilPred() ) t2=< CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  { sb.append(t1.image);
    sb.append(s);
    sb.append(t2.image);
    return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String OXPathActionWaitPred() :
{/*@bgen(jjtree) OXPathActionWaitPred */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHACTIONWAITPRED);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;
 String s;}
{/*@bgen(jjtree) OXPathActionWaitPred */
  try {
/*@egen*/  t=< WAIT > s=XPathNumber()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image+s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathActionUntilPred() :
{/*@bgen(jjtree) OXPathActionUntilPred */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHACTIONUNTILPRED);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;
 String s;}
{/*@bgen(jjtree) OXPathActionUntilPred */
  try {
/*@egen*/  t=< UNTIL > s=OXPathPathSegment()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image+s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String OXPathAttributeDeclaration() ://{Token t;// String s;}//{//  t=< AT > s=XPathQName() {return process(jjtThis,(t.image+s));}//}

String OXPathAbsoluteActionSignal() :
{/*@bgen(jjtree) OXPathAbsoluteActionSignal */
  SimpleNode jjtn000 = new SimpleNode(JJTOXPATHABSOLUTEACTIONSIGNAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) OXPathAbsoluteActionSignal */
  try {
/*@egen*/  t=< SLASH >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnGroundedOXPathActionDeclaration() :
{/*@bgen(jjtree) UnGroundedOXPathActionDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTUNGROUNDEDOXPATHACTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) UnGroundedOXPathActionDeclaration */
    try {
/*@egen*/
    ( s=UnGroundedOXPathActionPosition() | s=UnGroundedOXPathActionExplicit() | s=UnGroundedOXPathActionVariable() | s=OXPathActionKeyword() )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*///  ( s=UnGroundedOXPathActionPosition() | s=UnGroundedOXPathActionExplicit() | s=UnGroundedOXPathActionReference() | s=OXPathActionKeyword() )
  {return process(jjtn000,s);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String UnGroundedOXPathActionPosition() :
{/*@bgen(jjtree) UnGroundedOXPathActionPosition */
 SimpleNode jjtn000 = new SimpleNode(JJTUNGROUNDEDOXPATHACTIONPOSITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;}
{/*@bgen(jjtree) UnGroundedOXPathActionPosition */
  try {
/*@egen*/  s1=GroundedOXPathActionPosition() {sb.append(s1);}
  ( t=< COMMA > s2=UnGroundedOXPathActionPosition() {sb.append(t.image); sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String GroundedOXPathActionPosition() :
{/*@bgen(jjtree) GroundedOXPathActionPosition */
 SimpleNode jjtn000 = new SimpleNode(JJTGROUNDEDOXPATHACTIONPOSITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GroundedOXPathActionPosition */
  try {
/*@egen*/  t=< DIGITS >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnGroundedOXPathActionExplicit() :
{/*@bgen(jjtree) UnGroundedOXPathActionExplicit */
 SimpleNode jjtn000 = new SimpleNode(JJTUNGROUNDEDOXPATHACTIONEXPLICIT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;}
{/*@bgen(jjtree) UnGroundedOXPathActionExplicit */
  try {
/*@egen*/  s1=GroundedOXPathActionExplicit() {sb.append(s1);}
  ( t=< COMMA > s2=UnGroundedOXPathActionExplicit() {sb.append(t.image); sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String GroundedOXPathActionExplicit() :
{/*@bgen(jjtree) GroundedOXPathActionExplicit */
 SimpleNode jjtn000 = new SimpleNode(JJTGROUNDEDOXPATHACTIONEXPLICIT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) GroundedOXPathActionExplicit */
  try {
/*@egen*/  s=XPathLiteral()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnGroundedOXPathActionVariable() :
{/*@bgen(jjtree) UnGroundedOXPathActionVariable */
 SimpleNode jjtn000 = new SimpleNode(JJTUNGROUNDEDOXPATHACTIONVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) UnGroundedOXPathActionVariable */
  try {
/*@egen*/  t=< VARIABLE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String UnGroundedOXPathActionReference() ://{StringBuilder sb = new StringBuilder();// String s1;// Token t1;// Token t2;// String s2;// Token t3;}//{//NCName includes <PERIOD > token//  (( s1=XPathQName() {sb.append(s1);}//  ( t1=< COMMA > t2=< FUNCTION_NAME > {sb.append(t1.image); sb.append(t2.image);}//  (s2=OXPathActionReferenceDependencyList() {sb.append(s2);} )?//  t3=< CLOSE_PARAN > {sb.append(t3.image);} )?)//| t1=< FUNCTION_NAME > s1=OXPathActionAttributes() t2=< CLOSE_PARAN > {sb.append(t1.image); sb.append(s1); sb.append(t2.image);})//  {return process(jjtThis,sb.toString());}//}////String OXPathActionAttributes() ://{StringBuilder sb = new StringBuilder();// String s1;// Token t;// String s2;}//{//  s1=XPathLiteral() {sb.append(s1);}//  [ t=< COMMA > s2=OXPathActionAttributes() {sb.append(t.image); sb.append(s2);}]//  {return process(jjtThis,sb.toString());}//}////String OXPathActionReferenceDependencyList() ://{StringBuilder sb = new StringBuilder();// String s1;// Token t;// String s2;}//{//  s1=OXPathActionReferenceDependency() {sb.append(s1);}//  [ t=< COMMA > s2=OXPathActionReferenceDependencyList() {sb.append(t.image); sb.append(s2);} ]//  {return process(jjtThis,sb.toString());}//}////String OXPathActionReferenceDependency() ://{String s;}//{//  s=XPathQName() {return process(jjtThis,s);}//}

String OXPathActionKeyword() :
{/*@bgen(jjtree) OXPathActionKeyword */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHACTIONKEYWORD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OXPathActionKeyword */
try {
/*@egen*/
(  t=< FOCUS >
| t=< CLICK >
| t=< DBLCLICK >
| t=< MOUSEDOWN >
| t=< MOUSEENTER >
| t=< MOUSEMOVE >
| t=< MOUSEOVER >
| t=< MOUSEOUT >
| t=< MOUSEUP >
| t=< WHEEL >
| t=< SUBMIT >
| t=< UNCLICK >
| t=< CHECK >
| t=< UNCHECK > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*///  (t=< CLICK > | t=< SUBMIT > | t=< UNCLICK > | t= < CHECK > | t=< UNCHECK >)
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}

String OXPathExtractionMarker() :
{/*@bgen(jjtree) OXPathExtractionMarker */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHEXTRACTIONMARKER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s1;
 Token t2;
 String s2;
 Token t3;}
{/*@bgen(jjtree) OXPathExtractionMarker */
  try {
/*@egen*/
  t1=< BEGIN_EXTRACT_MARK > {sb.append(t1.image);}
  s1=OXPathExtractionName() {sb.append(s1);}
  (t2=< EQUALS > s2=OXPathExtractionValue() {sb.append(t2.image); sb.append(s2);})?
  (t3=< END_EXTRACT_MARK > | t3=< GREATER >) {sb.append(t3.image);}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*///We overload ">" so we don't have to overly generalize the greater operator
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String OXPathExtractionName() :
{/*@bgen(jjtree) OXPathExtractionName */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHEXTRACTIONNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OXPathExtractionName */
  try {
/*@egen*/  t=< QNAME >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String OXPathExtractionValue()                           :
{/*@bgen(jjtree) #OXPathExtractionValue(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTOXPATHEXTRACTIONVALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #OXPathExtractionValue(> 1) */
  try {
/*@egen*/  s=XPathPrimaryExpr()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                         jjtc000 = false;
                       }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathExpr()               :
{/*@bgen(jjtree) #XPathExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #XPathExpr(> 1) */
  try {
/*@egen*/  s=XPathOrExpr()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtc000 = false;
                  }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathOrExpr()                 :
{/*@bgen(jjtree) #XPathOrExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHOREXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;}
{/*@bgen(jjtree) #XPathOrExpr(> 1) */
  try {
/*@egen*/  s1=XPathAndExpr() {sb.append(s1);} ( t=< OR > s2=XPathOrExpr() {sb.append(t.image); sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}

String XPathAndExpr()                  :
{/*@bgen(jjtree) #XPathAndExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHANDEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
String s1;
Token t;
String s2;}
{/*@bgen(jjtree) #XPathAndExpr(> 1) */
  try {
/*@egen*/
  s1=XPathEqualityExpr() {sb.append(s1);} ( t=< AND > s2=XPathAndExpr() {sb.append(t.image); sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathEqualityExpr()                       :
{/*@bgen(jjtree) #XPathEqualityExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHEQUALITYEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s;
 String s2;}
{/*@bgen(jjtree) #XPathEqualityExpr(> 1) */
  try {
/*@egen*/  s1=XPathRelationalExpr() {sb.append(s1);}
  (  s=XPathEqualityExprOp() {sb.append(s);}
     s2=XPathEqualityExpr() {sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathEqualityExprOp() :
{/*@bgen(jjtree) XPathEqualityExprOp */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHEQUALITYEXPROP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathEqualityExprOp */
  try {
/*@egen*/  ( t=< EQUALS > | t=< NOTEQUAL > | t=< WORD_TEST > | t=< CONTAINS >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathRelationalExpr()                         :
{/*@bgen(jjtree) #XPathRelationalExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHRELATIONALEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s;
 String s2;}
{/*@bgen(jjtree) #XPathRelationalExpr(> 1) */
  try {
/*@egen*///here, right-associative, rather than left-associative in XPath standard  s1=XPathAdditiveExpr() {sb.append(s1);}
  ( s=XPathRelationalExprOp() {sb.append(s);}
    s2=XPathRelationalExpr() {sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathRelationalExprOp() :
{/*@bgen(jjtree) XPathRelationalExprOp */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHRELATIONALEXPROP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathRelationalExprOp */
  try {
/*@egen*/  ( t=< GREATER >  | t=< LESS > | t=< GREATERTE > | t=< LESSTE > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String XPathAdditiveExpr()                       :
{/*@bgen(jjtree) #XPathAdditiveExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHADDITIVEEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s;
 String s2;}
{/*@bgen(jjtree) #XPathAdditiveExpr(> 1) */
  try {
/*@egen*/  s1=XPathMultiplicativeExpr() {sb.append(s1);}
  (  s=XPathAdditiveExprOp() {sb.append(s);}
     s2=XPathAdditiveExpr() {sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}

String XPathAdditiveExprOp() :
{/*@bgen(jjtree) XPathAdditiveExprOp */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHADDITIVEEXPROP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathAdditiveExprOp */
  try {
/*@egen*/  (t=< PLUS >  | t=< MINUS > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathMultiplicativeExpr()                             :
{/*@bgen(jjtree) #XPathMultiplicativeExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHMULTIPLICATIVEEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s;
 String s2;}
{/*@bgen(jjtree) #XPathMultiplicativeExpr(> 1) */
  try {
/*@egen*/  s1=XPathUnaryExpr() {sb.append(s1);}
  ( s=XPathMultiplicativeOp() {sb.append(s);}
    s2=XPathMultiplicativeExpr() {sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathMultiplicativeOp() :
{/*@bgen(jjtree) XPathMultiplicativeOp */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHMULTIPLICATIVEOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathMultiplicativeOp */
  try {
/*@egen*/  ( t=< MULTIPLY > | t=< DIV > | t=< MOD > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathUnaryExpr()                    :
{/*@bgen(jjtree) #XPathUnaryExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHUNARYEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s;
 String s1;}
{/*@bgen(jjtree) #XPathUnaryExpr(> 1) */
  try {
/*@egen*/  ( s1=XPathUnaryExprOp() {sb.append(s1);} )* s=XPathUnionExpr() {sb.append(s);}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathUnaryExprOp() :
{/*@bgen(jjtree) XPathUnaryExprOp */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHUNARYEXPROP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathUnaryExprOp */
  try {
/*@egen*/  t=< MINUS >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String XPathPrimaryExpr()                      :
{/*@bgen(jjtree) #XPathPrimaryExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHPRIMARYEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 Token t1;
 String s;
 Token t2;}
{/*@bgen(jjtree) #XPathPrimaryExpr(> 1) */
try {
/*@egen*/( ( t1=< OPEN_PARAN > s=XPathExpr() t2=< CLOSE_PARAN > {sb.append(t1.image); sb.append(s); sb.append(t2.image);} )
| s=XPathLiteral() {sb.append(s);}
| s=XPathNumber() {sb.append(s);}
| s=XPathFunctionCall() {sb.append(s);} )/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
  jjtc000 = false;
}
/*@egen*/
{return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
  }
}
/*@egen*/
}

String XPathNumber() :
{/*@bgen(jjtree) XPathNumber */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathNumber */
  try {
/*@egen*/  t=< NUMBER >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< DIGITS >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathFunctionCall() :
{/*@bgen(jjtree) XPathFunctionCall */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHFUNCTIONCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s3;
 String s1;
 Token t2;
 String s2;
 Token t3;}
{/*@bgen(jjtree) XPathFunctionCall */
  try {
/*@egen*/  s3=XPathFunctionCallName() {sb.append(s3);}
  ( s1=XPathArgument() {sb.append(s1);} ( t2=< COMMA > s2=XPathArgument() {sb.append(t2.image); sb.append(s2);} )* )? t3=< CLOSE_PARAN > {sb.append(t3.image);}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String XPathFunctionCallName() :
{/*@bgen(jjtree) XPathFunctionCallName */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHFUNCTIONCALLNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XPathFunctionCallName */
  try {
/*@egen*/  t=< FUNCTION_NAME >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String XPathArgument()                   :
{/*@bgen(jjtree) #XPathArgument(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHARGUMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #XPathArgument(> 1) */
  try {
/*@egen*/  s=XPathExpr()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  jjtc000 = false;
                }
/*@egen*/ {return process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathUnionExpr()                    :
{/*@bgen(jjtree) #XPathUnionExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHUNIONEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;}
{/*@bgen(jjtree) #XPathUnionExpr(> 1) */
  try {
/*@egen*/  s1=XPathPathExpr() {sb.append(s1);} ( t=< UNION > s2=XPathUnionExpr() {sb.append(t.image); sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

String XPathPathExpr()                   :
{/*@bgen(jjtree) #XPathPathExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHPATHEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 Token t;
 String s2;
 String s3;}
{/*@bgen(jjtree) #XPathPathExpr(> 1) */
  try {
/*@egen*/  s1=OXPathPathSegment()/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                           jjtc000 = false;
                         }
/*@egen*/ {return process(jjtn000,s1);}
| s1=XPathFilterExpr() {sb.append(s1);} ( ( t=< SLASH > {sb.append(t.image);} | s3=DescendantOrSelfShort() {sb.append(s3);})
                                          s2=RelativeOXPathLocationPath() {sb.append(s2);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}
String XPathFilterExpr()                     :
{/*@bgen(jjtree) #XPathFilterExpr(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTXPATHFILTEREXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder();
 String s1;
 String s2;}
{/*@bgen(jjtree) #XPathFilterExpr(> 1) */
  try {
/*@egen*/  s1=XPathPrimaryExpr() {sb.append(s1);} ( s2=XPathPredicate() {sb.append(s2);} )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {return process(jjtn000,sb.toString());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
String AbbreviatedAbsoluteOXPathLocationPath() :
{/*@bgen(jjtree) AbbreviatedAbsoluteOXPathLocationPath */
 SimpleNode jjtn000 = new SimpleNode(JJTABBREVIATEDABSOLUTEOXPATHLOCATIONPATH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s1;
 String s;}
{/*@bgen(jjtree) AbbreviatedAbsoluteOXPathLocationPath */
  try {
/*@egen*/  s1=DescendantOrSelfShort() s=RelativeOXPathLocationPath()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {return process(jjtn000,(s1+s));}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//void AbbreviatedRelativeOXPathLocationPath() ://{}//{//here, w3c grammar says second non-terminal is step, meaning only last step is DESCENDENT-OR-SELF abbreviation; change//  OXPathStep() < DESCENDENT_OR_SELF_SHORT > RelativeOXPathLocationPath()//}

String AbbreviatedStep() :
{/*@bgen(jjtree) AbbreviatedStep */
 SimpleNode jjtn000 = new SimpleNode(JJTABBREVIATEDSTEP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AbbreviatedStep */
  try {
/*@egen*/  t=< PERIOD >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return process(jjtn000,t.image);}
| t=< PARENT_SHORT >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {return process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//void CommonAncestorDeclaration() ://{}//{//  < COMMONANCESTOR > < EQUALS > ScraperPath() < ENDLINE_XQ >//}

void ScrapeDeclaration() :
{/*@bgen(jjtree) ScrapeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTSCRAPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScrapeDeclaration */
  try {
/*@egen*/
  ScraperName() <EQUALS_DEFAULT > ScraperPath() < ENDLINE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ScraperName() :
{/*@bgen(jjtree) ScraperName */
 SimpleNode jjtn000 = new SimpleNode(JJTSCRAPERNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScraperName */
  try {
/*@egen*/
  t=< QNAME_DEFAULT >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {process(jjtn000,t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ScraperPath()                 :
{/*@bgen(jjtree) #ScraperPath(> 1) */
 SimpleNode jjtn000 = new SimpleNode(JJTSCRAPERPATH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #ScraperPath(> 1) */
  try {
/*@egen*/  s=XPathUnionExpr()/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                       jjtc000 = false;
                     }
/*@egen*/ {process(jjtn000,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}